syntax = "proto3";

package sniper;

import "google/protobuf/any.proto";
import "trainer/core/proto/train_config.proto";

/// Role of worker in distributed training framework.
enum Role {
  ROLE_INVALID = 0;
  ROLE_SCHEDULER = 1;
  ROLE_TRAINER = 2;
  ROLE_PS = 4;
  ROLE_HUB = 8;
}

enum VariableType {
  VAR_INVALID = 0;
  VAR_DENSE = 1;
  VAR_EMBEDDING = 2;
}

/// Supported data type.
enum DataType {
  DT_INVALID = 0;

  DT_FLOAT = 1;
  DT_DOUBLE = 2;
  DT_INT32 = 3;
  DT_UINT8 = 4;
  DT_INT16 = 5;
  DT_INT8 = 6;
  DT_STRING = 7;
  DT_COMPLEX64 = 8;
  DT_INT64 = 9;
  DT_BOOL = 10;
  DT_QINT8 = 11;
  DT_QUINT8 = 12;
  DT_QINT32 = 13;
  DT_BFLOAT16 = 14;
  DT_QINT16 = 15;
  DT_QUINT16 = 16;
  DT_UINT16 = 17;
  DT_COMPLEX128 = 18;
  DT_HALF = 19;
  DT_RESOURCE = 20;
  DT_VARIANT = 21;
  DT_UINT32 = 22;
  DT_UINT64 = 23;
}

message TensorShapeProto { repeated int64 dim = 1; }

message TensorProto {
  DataType dtype = 1;
  TensorShapeProto tensor_shape = 2;
  bytes tensor_content = 3;

  repeated float float_val = 4;
  repeated uint64 uint64_val = 5;
}

message NamedTensorProto {
  string name = 1;
  TensorProto tensor = 2;
}

message SparseTensorProto {
  TensorProto idx = 1; // dtype: uint64
  TensorProto val = 2;
}

message NamedSparseTensorProto {
  string name = 1;
  SparseTensorProto sparse_tensor = 2;
}

enum ReduceType {
  REDUCE_INVALID = 0;
  REDUCE_SUM = 1;
  REDUCE_AVG = 2;
}

message EmbLoadInfo {
  string name = 1;

  // embedding lookup count, default: 1.0
  float load = 2;
}

message DefaultOption {}


message CreateOption {
  VariableType type = 1;
  TensorShapeProto shape = 2;
  uint32 emb_size = 3;
  uint32 capacity = 4;
  int32 shard_idx = 5;
  int32 shard_num = 6;
  repeated int32 fields = 7;
  int32 hit_limit = 8;
  int32 hash_size = 9;
  float embedding_lr = 10;
  float embedding_eps = 11;
  string optimizer = 12;
  float beta1 = 13;
  float beta2 = 14;
  int32 feature_inclusion_freq = 15;
  // whether ps use vector to store parameters.
  bool use_param_vector = 16;
  bool delete_var = 17;
}

message FreezeOption {
  string model_name = 1;

  bool is_scheduler = 2;
  string scheduler_ep = 3;
  repeated string hub_eps = 4;
  repeated string ps_eps = 5;

  // all vars
  repeated string dense_vars = 6;
  repeated string dense_var_queues = 7;
  repeated string sparse_vars = 8;
  repeated string sparse_var_queues = 9;

  int32 total_sparse_shard = 10;
  map<string, RepeatedString> ps_shard = 11;

  int32 btq_push_limit = 12;
  int32 ckp_save_btq_incr_sparse_step = 13;

  string embedding_table_store_type = 14;
}

message FeedFieldInfo {
  int32 field_idx = 1;
  int32 field_dim = 2;
  bytes feature = 3;
}

message FeedSampleOption {
  uint32 batch_size = 1;
  repeated FeedFieldInfo field_info = 2;
  WorkMode work_mode = 3;
}

message PullOption {
  bool completed = 1;
  int64 progress = 2;
  VariableType variable_type = 3;
}

message PushOption {
  VariableType variable_type = 1;
}

enum WorkMode {
  MODE_INVALID = 0;
  MODE_TRAIN = 1;
  MODE_VALID = 2;
  MODE_COUNT = 3;
}

message EmbeddingLookupOption {
  uint32 batch_size = 1;
  ReduceType reduce_type = 2;
  repeated int32 field_idx = 3;
  repeated int32 field_dim = 4;
  WorkMode work_mode = 5;

  // for response
  string errmsg = 6;
  bool is_pretrain = 7;
  // The microseconds spend for lookup var.
  repeated uint64 time_spends = 8;
  int32 ps_index = 9;
}

message PushGradOption {
  uint32 batch_size = 1;
  float eta = 2;
  float eps = 3;
  float decay = 4;
  float l2 = 5;
  int32 version = 6;
  bool use_freq_scale = 7;
  float learning_rate = 8;

  repeated int32 field_idx = 9;
  repeated int32 field_dim = 10;
}

enum CheckPointTarget {
  CKP_TARGET_INVALID = 0;
  CKP_TARGET_NFS = 1;
  CKP_TARGET_BTQ = 2;
  CKP_TARGET_KAFKA = 3;
}

enum CheckPointType {
  CKP_TYPE_INVALID = 0;
  CKP_TYPE_INCR = 1;
  CKP_TYPE_FULL = 2;
  CKP_TYPE_STREAM = 3;
}

message SaveOption {
  CheckPointType ckp_type = 1;
  CheckPointTarget ckp_target = 2;
  int64 version = 3;
  string nfs_path = 4;
  // btq or kafka
  string queue = 5;

  int32 shard_idx = 6;
  int32 shard_num = 7;
  int32 base_bt_queue_client_push_limit = 8;
  VariableType variable_type = 9;
}

message RestoreOption {
  int32 shard_idx = 1;
  int32 shard_num = 2;
  repeated string nfs_weight_path = 3;
  repeated string nfs_adagrad_path = 4;

  // for response
  bool finish = 5;
  string errmsg = 6;

  VariableType variable_type = 7;
}

message CompleteOption {}

message SparseFieldInfo {
  string class_name = 1;
  int64 prefix = 2;
  int32 index = 3;
  int64 size = 4;
  bool valid = 5;
  int32 slot = 6;
};

message FeatureList {
  repeated int64 sparse_field_count = 1;
  repeated int64 sparse_hash_size = 2;
  repeated int32 sparse_field_index = 3;
  repeated int64 dense_field_count = 4;
  repeated string sparse_class_names = 5;
  repeated string dense_class_names = 6;
  repeated SparseFieldInfo field_list = 7;
   // correspond to sparse_class_name.
  repeated string sparse_emb_table = 8;
}

// sample source
enum Src {
  SRC_INVALID = 0;
  SRC_HDFS = 1;
  SRC_KAFKA = 2;
  SRC_AIPLATFORM_COMMON_SAMPLE = 3;
  SRC_BTQ = 4;
  SRC_DRAGON = 5;
}

// hdfs src
message HdfsSrc {
    string dir = 1;
    repeated string file_list = 2;
    bool train_hash = 3;
}

// kafka src
message KafkaSrc {
    string topic = 1;
    string group_id = 2;
    string consumer_user_param = 3;
    string kafka_tag = 4;
}

message StartSampleOption {
  // hub parallel.
  int32 parallel = 1;
  repeated string ps_eps = 2;

  int32 hub_idx = 3;
  repeated string hub_eps = 4;

  // feature & sample info
  FeatureList feature_list = 5;
  int32 batch_size = 6;
  int32 dense_total_size = 7;
  int32 label_size = 8;

  // for emb placement
  repeated EmbeddingTable emb_tables = 9;

  Src src = 10;

  HdfsSrc hdfs_src = 11;

  KafkaSrc kafka_src = 12;

  // aiplatform common sample src
  message AiplatformCommonSrc { string kess_service = 1; }
  AiplatformCommonSrc aiplatform_common_src = 13;

  string model_name = 14;

  int32 embedding_size = 15;
  repeated string shard_addr = 16;

  bool need_batch = 17;
  string label_extractor = 18;
  string tab = 19;
  string item_type = 20;
  string item_filter = 21;

  bool use_weight = 22;
  string hash_type = 23;
  bool debug = 24;

  string aim = 25;
  float sample_rate = 26;
  float neg_sample_rate = 27;

  bool enable_format_opt = 28;
  string checkpoint_version = 29;
  bool use_hash_distribute = 30;

  Role role = 31;
  BsSampleOption bs_option = 32;
  uint64 batch_cache_capacity = 33;
  string debug_info = 34;
  int32 message_obsolete_seconds = 35;

  int32 btq_logic_topic_start = 36;
  int32 btq_logic_topic_end = 37;

  string dragon_pipeline_str = 38;

  // queue size for hub.
  int32 queue_str_size = 39;
  bool dragonfly = 40;
  int32 neg_label = 41;
  bool fake_missed_feature = 42;
  bool batched_sample = 43;
  bool is_input_one_column = 44;
  int32 feed_queue_max_size = 45;
  bool shuffle = 46;
  int32 shuffle_size = 47;
  bool parallel_eq_cpu_core = 48;

  int32 hub_stream_num = 49;
  int32 hub_stream_size = 50;
  int32 hub_train_log_processor_num = 51;
  int32 hub_train_log_processor_size = 52;
  int32 hub_feed_node_num = 53;
  int32 hub_feed_node_size = 54;
  WorkMode work_mode = 55;
  bool is_kafka_feature = 56;
  int32 dragon_queue_size = 57;
}

message BsSampleOption {
  // consumer
  string consumer_topic = 1;
  string group_id = 2;
  string consumer_user_param = 3;
  // producer
  string train_topic = 4;
  string merge_topic = 5;

  int32 need_batch = 6;
  Src src = 7;
  float sample_rate = 8;
}

message ReadSampleOption {
  // response
  uint64 batch_id = 1;
  bool over = 2;
  bool need_wait = 3;
  repeated string debug_info = 4;
}

message HeartbeatOption {
  enum StatusType {
    TYPE_INVALID = 0;
    TYPE_CKP = 1;
    TYPE_CHECK = 2;
  }
  message CkpStatus {
    bool incr = 1;
    int64 version = 2;
    string var_name = 3;
    bool success = 4;
    CheckPointTarget ckp_target = 5;
    string nfs_path = 6;
    int32 shard_idx = 7;
    int32 shard_num = 8;
  }
  message CheckStatus {
    int64 version = 1;
    CheckPointType ckp_type = 2;
    CheckPointTarget ckp_target = 3;
    // for response
    bool succ = 4;
    bool finish = 5;
    string errmsg = 6;
  }

  StatusType st_type = 1;
  CkpStatus ckp_st = 2;
  CheckStatus check_st = 3;
}

message CountFeatureOption {
  map<string, int64> count_feature = 1;
}

message SaveFeatureCountOption {
  string varname = 1;
  int32 shard_idx = 2;
  int32 shard_num = 3;
  string nfs_path = 4;

  // for response
  bool finish = 5;
  string errmsg = 6;
}

message RestoreFeatureCountOption {
  string varname = 1;
  int32 shard_idx = 2;
  int32 shard_num = 3;
  repeated string paths = 4;

  // for response
  bool finish = 5;
  string errmsg = 6;
}

message TensorMessage {
  Role role = 1;
  uint32 role_id = 2;
  uint64 seq_id = 3;
  string varname = 4;
  google.protobuf.Any options = 5;

  TensorProto tensor1 = 10;
  TensorProto tensor2 = 11;
}

message IntList {
  repeated int32 value = 1;
}

// ps shard.
// field -> [ps_index]
message PsShard {
  repeated IntList value = 1;
}

message UpdateHubShardOption {
  int32 hub_idx = 1;
  PsShard ps_shard = 2;

  string errmsg = 3;
}

message VoidMessage {}
